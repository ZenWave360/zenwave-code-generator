package {{api.apiPackage}};

import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.messaging.MessageHeaders;
import org.springframework.stereotype.Component;

<#if api.modelPackage??>
import {{api.modelPackage}}.*;
</#if>

@Component
@EnableBinding({{interfaceClassName}}InputChannels.class)
public class {{apiClassName}} {

    private {{interfaceClassName} ${interfaceClassName?uncap_first}};
    
    @Autowired
    public {{apiClassName}(${interfaceClassName} ${interfaceClassName?uncap_first}}) {
        super();
        this.{{interfaceClassName?uncap_first} = ${interfaceClassName?uncap_first}};
    }

<#list api.operations as operation>
    @StreamListener({{interfaceClassName}InputChannels.${operation.operationId?upper_case?replace("-","_")}})
    public void {{operation.operationId}}Handler(final Object message, MessageHeaders messageHeaders) throws InterruptedException {
        <#list operation.messages as message>
        if(message instanceof {{message.paramType}}) {
            {{interfaceClassName?uncap_first}.${operation.operationId}${(operation.messages?size > 1)?then(message.name, '')}((${message.paramType}}) message, asHeaders(messageHeaders));
            return;
        }

        </#list>
    }
</#list>

    protected Header[] asHeaders(MessageHeaders messageHeaders) {
        if (!messageHeaders.isEmpty()) {
            return messageHeaders.entrySet().stream()
                    .map(entry -> new Header(entry.getKey(), entry.getValue()))
                    .collect(Collectors.toList())
                    .toArray(new Header[] {});
        }
        return null;
    }
}