package {{apiPackage}};

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.Message;
{{#if exposeMessage}}
import org.springframework.messaging.support.MessageBuilder;
{{/if}}
import org.springframework.messaging.MessageHeaders;
import org.springframework.stereotype.Component;

import java.util.function.Consumer;

{{#if modelPackage}}
import {{modelPackage}}.*;
{{/if}}

@Component("{{operation.operationIdKebabCase}}")
public class {{operation.operationIdCamelCase}}{{consumerSuffix}} implements Function<Flux<Message<?>>, Mono<Void>> {

    @Autowired
    {{#assign "bussines"}}{{uncapFirst operation.x--operationIdCamelCase}}{{/assign}}
    private {{operation.x--operationIdCamelCase}} {{bussines}};


    @Override
    public Mono<Void> apply(Flux<Message<?>> messageFlux) {
        return messageFlux.flatMap(m -> {
        {{#each operation.x--messages as |message|}}
            if(m.getPayload() instanceof {{message.x--javaType}}) {
            {{#if exposeMessage}}
                {{bussines}}.{{operation.operationId}}{{#if (size operation.x--messages) eq 1}}_{{message.name}}{{/if}}(Flux.just(MessageBuilder.<{{message.x--javaType}}>createMessage(({{message.x--javaType}}) m.getPayload(), m.getHeaders())));
            {{else}}
                {{bussines}}.{{operation.operationId}}{{#if (size operation.x--messages) eq 1}}_{{message.name}}{{/if}}(Flux.just(({{message.x--javaType}}) m.getPayload());
            {{/if}}
            }
        {{/each}}
            return Mono.empty();
        }).then();
    }
}